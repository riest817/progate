○ 投稿を編集する

	①投稿したい内容を取得する
		post = Post.find_by(id:1)
	②その投稿のcontentの値を上書きする
		post.content = "Rails"
	③データベースに保存
		post.save
		
○ updated_at

	投稿データを編集してデータベースに保存すると、updated_atカラムの値がデータを更新したときの時刻に更新される
	
○ 投稿を削除する

	①データベースから削除したい投稿を取得する
		post = Post.find_by(id:2)
	②destroyメソッドを用いて、投稿を削除する
		post.destroy
		
○ 新しいページを用意する
	
	ルーティング、アクション、ビューを用意する
	
○ 投稿編集ページへのリンクを追加しよう

	<%= link_to("編集", "/posts/#{@post.id}/edit")%>
	
○ フォームに初期値を用意する

	<textarea>タグでは「<textarea>初期値</textarea>」のようにタグで囲んだ部分を初期値に設定できる
	
○ 投稿内容をフォームの初期値にしよう

	コントローラ
	def edit
		@post = Post.find_by(id: params[:id])
	end
	
	ビュー
		<textarea><%= @post.content %></textarea>
		
○ updateアクションを用意する

	updateアクションはフォームの値を受け取るので、ルーティングをgetではなく、postにする
	また、特定のidの投稿を更新するので、URLにidを含むようにする
	投稿を編集した後は投稿一覧ページにリダイレクトさせるので、ビューは不要
		コントローラのupdateアクションで
		redirect_to("/posts/index")
	
○ フォームの送信先を指定する

	フォームで入力された内容ｗデータベースに保存するためには、フォームのデータをupdateアクションに送信する必要がある
	新規投稿ページを作ったときと同様に、form_tagメソッドを用いて、送信先を指定する
	<%=form_tag("/posts/#{@post.id}/update") do %>
	...
	<% end %>
	
○ 投稿を更新する
	
	edit.html.erb (ビュー内)
		<textarea>タグにname属性を指定する
		<textarea name"content">...<textarea>
		
	post_controller.rb updateアクション
		①更新する投稿データをデータベースから取り出す
			@post = Post.find_by(id: params[:id])
		②フォームから送信された値をparams[:content]で受け取る
			@post.content = params[:content]
		③投稿データの内容を更新する
			@post.save
		
○ destroyアクションのルーティング

	destroyアクションのルーティングは、getではなくpostにする
		
○ getとpost

	get:データベースを変更しないアクション
	post:データベースを変更するアクション
	
○ post用のリンクを作る

	link_toの第3引数がないと、getで書かれているルーティングを探してしまう
	そこで、link_toの第3引数に「{method: "post"}」を追加することで、「post」として定義されているルーティングにマッチするようになる
	
○ 削除機能を作る
	
	post_controller.rb destroyアクション
		①投稿の取得
			@post = Post.find_by(id: params[:id])
		②投稿の削除
			@post.destroy