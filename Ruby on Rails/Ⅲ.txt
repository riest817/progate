○ idカラム

	データベースに保存される時に数字が自動で入る
	idは1から順に入っていき、データ毎に重複しないようになっている
	
○ created_atカラムとupdated_atカラム

	データベースに保存された時刻が自動で入るようになっている
	updated_atはデータ更新時にも時刻が更新される
	
○ find_byメソッド

	特定のidの投稿を取得する
	「モデル名.find_by(カラム名：値)」その値を持ったデータをデータモデルから取得できる

○ URLにidを含めよう

	ルーティングのURL部分に「:」を用いて「posts/:id」と指定することで、
	「/posts/1」でも「/posts/2」でもshowアクションにいくようにできる
	「posts/:id」と書くと「/posts/○○」のような全てのURLに該当する
	
○ posts/:idの注意点

	「posts/:id」というルーティングは「posts/index」より↓に書かなければいけない
	ルーティングは合致するURLを上から順に探す
	「posts/index」よりも上に書くと、localhost:3000/posts/index」というURLは「posts/:id」というルーティングに合致してしまう
	
○ 変数params

	コントローラのアクション内では、ルーティングで設定したURLの「:id」の値を取得することができる
	その値のparamsという変数のハッシュとして入っている
	params[:id]とすることで、その値を取得できる

○ 投稿詳細ページを完成させよう

	showアクションで変数@postを定義し、idカラムの値がparams[:id]と等しい投稿をデータベースから取得して代入する
	@postをshow.html.erbで表示することで、各URLに対応した投稿データが表示される

○ 詳細ページへのリンクを作成しよう

	各投稿の内容の部分をクリックすると詳細ページに移動できるように、link_to(post.content, "/posts/#{post.id}") とします

○ 新規投稿ページの準備

	新規投稿ページは、「localhost:3000/posts/new」というURLでアクセスできるようにする
	そのためにルーティング、アクション、ビューを追加する
	アクションは、newアクションとする
	
○ 入力フォームを作成しよう

	HTML＆CSSのレッスンで学習した<textarea>タグや<input>タグを用いることで入力フォームを作成することができる
	送信ボタンのがtype="submit"と、value="投稿"を指定すること
	
○ 投稿を保存するまでの流れ

	フォームの投稿ボタンを押すと、Rails側に投稿データが送信される
	今回はcreateアクションを容易して、受け取った投稿データをデータベースに保存するようにする
	createアクションのURLは「/posts/create」とする
	
○ createアクションのルーティング

	今までルーティングを書く際に「get」と書いてきましたが、フォームの値を受け取る場合は「post」とする必要がある
	通常は「get」、フォームの値を受け取るときは「post」とする
	
○ フォームの送信先を指定しよう

	form_tagメソッドを用いると、フォームに入力されたデータを送信できる
	「form_tag(送信先URL) do」のように送信先のURLを指定する
	これによって、<input type="submit" ...>のボタンを押したときに、指定されたURLにデータが送信される
	
○ リダイレクト

	createアクションではビューを用意する代わりに「リダイレクト」という「他のURLに転送する」ための手法
	
○ redirect_to

	他のURLに転送（リダイレクト）するには、、redirect_toメソッドを用いる
	「redirect_to(URL)」とすることで、そのページに転送できる
	
○ name属性

	<textarea>タグにname属性を指定すると、入力データを送信することができるようになり、name属性の値をキーとしたハッシュがRails側に送られる
	
○ フォームに入力されたデータを受け取る

	name属性を指定したフォームに入力されたデータは、コントローラのアクション内で受け取ることが可能
	フォームのデータは、変数paramsで受け取る
	paramsはname属性に設定した文字列をキーとしたハッシュになっている

○ データベースに投稿を保存する

	Postインスタンスを作成する際にparams[:content]を用いる
	Postインスタンスを保存することで投稿機能の完成
	
○ 変数paramsのまとめ

	入力データを受け取るためのparamsはURLからidの値を取得するときにつかった
	paramsは以下の2通りの使い方がある
	①「:○○」を使ったルーティングのURLから値を取得する
	②「name="○○"」がついたフォームの入力内容を受け取る

○ orderメソッド

	投稿一覧を並び替えることができる
	「order(カラム名: 並び替えの順序)」
	並び替えの順序には、昇順(:asc)と降順(:desc)のどちらかを指定できる
	created_atを基準に降順(:desc)に並び替えると、新しいものから順番に表示するようにできる
