○ バリデーション

	不正なデータがデータベースに保存されないように、データをテェックする仕組みのこと
	バリデーションに引っかかった場合（不正なデータの場合）にはデータベースに保存されない
	
○ バリデーションの書き方

	モデルで設定する
	「validates」を用いてカラム名と内容を指定する
	{presence: true} を用いることで、「そのカラムの値が存在するかどうか」をチェックする
	validates : 検証するカラム名, {検証する内容}
	
○ 文字数のバリエーション

	バリデーションでは、値が存在するだけでなく、文字数もチェックすることができる
	「length」を用い、{maximum: 数値}を指定することで、最大文字数を設定できる
	
○ 検証する内容を複数指定する

	バリデーションで検証する内容は、実はハッシュとなっており、図のようにコンマ(,)で区切ることで、複数指定できる
	
○ saveメソッドの戻り値

	投稿をデータベースに保存するために使ってきた「saveメソッド」は、
	保存に成功した場合は「true」
	バリデーションに引っかかって保存に失敗した場合は「false」を戻り値として返す
	
○ 直前の編集内容が消えてしまう仕組み

	①updateアクションでは、投稿失敗時にeditアクションに転送している
	②editアクションでは、データベースから編集前のデータを取得している
	③フォームの初期値は、②で取得した@post.contentの内容である
	よって、投稿失敗時には直前の内容ではなく編集前のデータが表示される
	
○ 直前の編集内容を表示する仕組み

	updateアクションの@postには直前の編集内容が入っているので、
	この@postをedit.html.erbで利用できるようにすれば、直前の編集内容を表示できるようになる
	
○ renderメソッド

	renderメソッドを用いることで、別のアクションを経由せずに、直接ビューを表示できる
	render("フォルダ名・ファイル名")のように表示したいビューを指定する
	redirect_toメソッドを使った場合と違い、そのアクション内で定義した@変数をビューでそのまま使うことができる
	
○ エラーメッセージを取得しよう

	saveメソッドを呼び出した際にバリデーションに失敗すると、Railsでは自動的にエラーメッセージが生成される
	@post.errors.full_messagesの中に、エラー内容が配列に入る
	
○ フラッシュ

	ページ上に1度だけ表示されるメッセージをフラッシュという
	フラッシュが表示された後、ページを更新したり、別ページに移動したりすると、フラッシュは表示されなくなる
	
○ 変数flash

	Railsではフラッシュを表示するために、特殊な変数flashが用意されている
	アクションで変数flash[:notice]に文字列を代入すると、flash[:notice]をビューで使うことができる
	変数flashは1度表示された後に自動で削除されるようになっている
	
	