○ JSXの書き方
	
	JSXは、HTMLとほとんど同じように記述することができる
	見出しには<h1>タグや<p>、<div>など、HTMLと同様のタグが使える
	
○ JSXの注意点

	return内に複数の要素があるとエラーになる
	複数の要素がある場合は、右図のように<div>タグで囲んで、1つの要素のまとめる
	
○ JSXのコメントアウト

	{/* */}で囲むとコメントアウトされる
	
○ imgタグの注意点

	JSXでは閉じタグが必要
	<img src='画像のURL' />のように、タグの終わりにスラッシュ「/」を記述する
	
○ App.jsの構成

	① Reactをimport
	② React.Componentを継承するクラスの定義
	③ JSXを戻り値とするrenderメソッドを定義
	④ クラスをexport

○ JSXとJSの範囲

	JSXとJSの記述部分は分かれている
	renderメソッドのreturn内のみ、JSXで記述する必要がる
	JSXで記述された要素はブラウザに表示される
	
○ JavaScriptを記述する

	renderメソッドの、returnの外にはJavaScriptを記述する
	renderメソッドの中で、定数textをJacaScriptで定義するが、returnの外なので記述できる
	
○ JSXにJSを埋め込む

	returnの中でも、JSXにJavaScriptを埋め込むことができる
	JSXにJavaScriptを埋め込むには、JavaScriptの部分を中括弧{}で囲む
	タグの属性の値も、同様に中括弧{}を使ってJSを記述できる
	
○ ボタンを作ってみよう

	ボタンは<button>タグで指定する
	ボタンには<button>タグで囲まれている文字が表示される
	
○ イベントとは

	イベントを用いると「何かが起きたときに、処理を実行するように指定」することができる」
	
○ イベントの書き方

	アロー関数を使って、タグ内に
	イベント名={() => { 処理 }}と書くことで、指定したタイミングで処理を実行できる
	アロー関数はJavaScriptなので、{}で囲むことを忘れないように
	
○ onClockイベント

	「クリックされたときに処理を実行する」 onClockイベントを用いる
	イベント名にonClickを指定し、<button onClick={() => {処理}}>
	アロー関数の処理部分には、イベント時に実行する処理を書く
	
○ stateを使った表示の変更

	step1: stateの定義
	step2: stateの表示
	step3: stateの変更
	
○ オブジェクトの復習

	複数の値をプロパティという名前をつけて管理できる
	stateの定義では、このオブジェクトを使う
	
○ オブジェクトの定義

	stateは、constructorの中で、オブジェクトとして定義する
	ここで定義したオブジェクトがstateの初期値となる
	その他の部分の。「constructor(props)」や「super(props)」といった同じ記述をするため、定型文として覚えておけば大丈夫
	
○ stateの取得

	定義したstateは、this.stateで取得できる
	stateはオブジェクトなので、console.log(this.state)をするとオブジェクトが出力される
	
○ stateを表示する

	this.stateはオブジェクトなので、this.state.プロパティ名とすることで、
	指定したstateのプロパティ名に対応する値を取得できる
	
○ stateの変更

	this.setState({プロパティ名：変更する値)とすることで、
	指定されたプロパティに対応するstateの値が変更される
	今回はボタンがクリックされたときに、名前の表示を変えるために、setStateをonClick内で行います
	
○ state変更の注意点

	Reactでは、下図のように「stateの値に直接代入することで値を変更してはいけない」という決まりがある
	値を変更したい場合は、setStateを使う
	
○ メソッドの定義

	メソッドはクラスの中で定義する
	メソッド名(){ 処理 }とすることでメソッドは定義できる
	メソッドは関数と似たようなもので、中括弧{}の中に行いたい処理を記述する
	
○ handleClickメソッド

	「stateのnameプロパティの値を変更する処理」
	メソッドはイベント内で呼び出すこともできる
	onClick{() => {this.メソッド名()}}とすることで、クリックされたときに、App.js内の指定したメソッドを実行できる
	
○ メソッドに引数を渡す

	handleClickメソッドがnameという引数を受け取るようにする
	そして、handleClickメソッドを呼び出す部分で、引数を渡す
	最後に、受け取った引数「name」を使って、stateのnameプロパティの値を変更する
	